datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Management {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User[]
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User[]
}

model User {
  id            String          @id @default(cuid())
  userId        Int             @unique @default(autoincrement())
  name          String?
  email         String          @unique
  username      String          @unique
  emailVerified DateTime?
  password      String?         @default("$2a$10$cJ4rP/D/DkyOOZvzZTwJTOxMvIMzs8Em30tQpazU69rN5rxTd5k9q")
  image         String?
  managementId  Int
  management    Management      @relation(fields: [managementId], references: [id])
  roleId        Int
  role          Role            @relation(fields: [roleId], references: [id])
  points        Int             @default(0)
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  Team                Team?                 @relation(fields: [teamId], references: [id])
  teamId              Int?
  FormResponse        FormResponse[]
  TeamDetail          TeamDetail[]
  ResetPasswordToken  ResetPasswordToken[]
  Station             Station[]
  Questionary         Questionary[]
  PasswordHistory     PasswordHistory[]
  ConfirmAccountToken ConfirmAccountToken[]
}

model ConfirmAccountToken {
  token     String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires   Boolean  @default(false)
  createdAt DateTime @default(now())
}

model PasswordHistory {
  id        Int      @id @default(autoincrement())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model ResetPasswordToken {
  id        String   @id @default(cuid())
  token     String   @unique @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expired   Boolean  @default(false)
  createdAt DateTime @default(now())
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Team {
  id           Int            @id @default(autoincrement())
  name         String
  points       Int            @default(0)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  PointPerWeek PointPerWeek[]
  TeamDetail   TeamDetail[]
  User         User[]
}

model TeamDetail {
  id        Int      @id @default(autoincrement())
  teamId    Int
  team      Team     @relation(fields: [teamId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Station {
  id           Int            @id @default(autoincrement())
  name         String
  userId       Int
  user         User           @relation(fields: [userId], references: [userId])
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  FormResponse FormResponse[]
}

model FormResponse {
  id                 Int                  @id @default(autoincrement())
  userId             String
  user               User                 @relation(fields: [userId], references: [id])
  stationId          Int
  week               Int
  station            Station              @relation(fields: [stationId], references: [id])
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  FormResponseDetail FormResponseDetail[]
}

model FormResponseDetail {
  id             Int          @id @default(autoincrement())
  formResponse   FormResponse @relation(fields: [formResponseId], references: [id])
  formResponseId Int
  question2      String?
  question3      String?
  question4      String?
  question5      String?
  question6      String?
  question7      String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model PointPerWeek {
  id        String   @id @default(cuid())
  teamId    Int
  team      Team     @relation(fields: [teamId], references: [id])
  points    Int      @default(0)
  week      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Questionary {
  id        Int      @id @default(autoincrement())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  question1 String
  question2 String
  question3 String
  week      Int?
  status    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
